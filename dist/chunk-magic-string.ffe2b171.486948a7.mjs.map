{"version":3,"file":"chunk-magic-string.ffe2b171.486948a7.mjs","sources":["../node_modules/vitest/dist/chunk-magic-string.ffe2b171.js"],"sourcesContent":["var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfunction encode(decoded) {\n    var sourceFileIndex = 0; // second field\n    var sourceCodeLine = 0; // third field\n    var sourceCodeColumn = 0; // fourth field\n    var nameIndex = 0; // fifth field\n    var mappings = '';\n    for (var i = 0; i < decoded.length; i++) {\n        var line = decoded[i];\n        if (i > 0)\n            mappings += ';';\n        if (line.length === 0)\n            continue;\n        var generatedCodeColumn = 0; // first field\n        var lineMappings = [];\n        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n            var segment = line_1[_i];\n            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n            generatedCodeColumn = segment[0];\n            if (segment.length > 1) {\n                segmentMappings +=\n                    encodeInteger(segment[1] - sourceFileIndex) +\n                        encodeInteger(segment[2] - sourceCodeLine) +\n                        encodeInteger(segment[3] - sourceCodeColumn);\n                sourceFileIndex = segment[1];\n                sourceCodeLine = segment[2];\n                sourceCodeColumn = segment[3];\n            }\n            if (segment.length === 5) {\n                segmentMappings += encodeInteger(segment[4] - nameIndex);\n                nameIndex = segment[4];\n            }\n            lineMappings.push(segmentMappings);\n        }\n        mappings += lineMappings.join(',');\n    }\n    return mappings;\n}\nfunction encodeInteger(num) {\n    var result = '';\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        var clamped = num & 31;\n        num >>>= 5;\n        if (num > 0) {\n            clamped |= 32;\n        }\n        result += chars[clamped];\n    } while (num > 0);\n    return result;\n}\n\nclass BitSet {\n\tconstructor(arg) {\n\t\tthis.bits = arg instanceof BitSet ? arg.bits.slice() : [];\n\t}\n\n\tadd(n) {\n\t\tthis.bits[n >> 5] |= 1 << (n & 31);\n\t}\n\n\thas(n) {\n\t\treturn !!(this.bits[n >> 5] & (1 << (n & 31)));\n\t}\n}\n\nclass Chunk {\n\tconstructor(start, end, content) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.original = content;\n\n\t\tthis.intro = '';\n\t\tthis.outro = '';\n\n\t\tthis.content = content;\n\t\tthis.storeName = false;\n\t\tthis.edited = false;\n\n\t\t{\n\t\t\tthis.previous = null;\n\t\t\tthis.next = null;\n\t\t}\n\t}\n\n\tappendLeft(content) {\n\t\tthis.outro += content;\n\t}\n\n\tappendRight(content) {\n\t\tthis.intro = this.intro + content;\n\t}\n\n\tclone() {\n\t\tconst chunk = new Chunk(this.start, this.end, this.original);\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t}\n\n\tcontains(index) {\n\t\treturn this.start < index && index < this.end;\n\t}\n\n\teachNext(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.next;\n\t\t}\n\t}\n\n\teachPrevious(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t}\n\n\tedit(content, storeName, contentOnly) {\n\t\tthis.content = content;\n\t\tif (!contentOnly) {\n\t\t\tthis.intro = '';\n\t\t\tthis.outro = '';\n\t\t}\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t}\n\n\tprependLeft(content) {\n\t\tthis.outro = content + this.outro;\n\t}\n\n\tprependRight(content) {\n\t\tthis.intro = content + this.intro;\n\t}\n\n\tsplit(index) {\n\t\tconst sliceIndex = index - this.start;\n\n\t\tconst originalBefore = this.original.slice(0, sliceIndex);\n\t\tconst originalAfter = this.original.slice(sliceIndex);\n\n\t\tthis.original = originalBefore;\n\n\t\tconst newChunk = new Chunk(index, this.end, originalAfter);\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif (this.edited) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit('', false);\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif (newChunk.next) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t}\n\n\ttoString() {\n\t\treturn this.intro + this.content + this.outro;\n\t}\n\n\ttrimEnd(rx) {\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tthis.split(this.start + trimmed.length).edit('', undefined, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\tif (this.intro.length) return true;\n\t\t}\n\t}\n\n\ttrimStart(rx) {\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tthis.split(this.end - trimmed.length);\n\t\t\t\tthis.edit('', undefined, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.outro = this.outro.replace(rx, '');\n\t\t\tif (this.outro.length) return true;\n\t\t}\n\t}\n}\n\nfunction getBtoa () {\n\tif (typeof window !== 'undefined' && typeof window.btoa === 'function') {\n\t\treturn (str) => window.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n\t\t};\n\t}\n}\n\nconst btoa = /*#__PURE__*/ getBtoa();\n\nclass SourceMap {\n\tconstructor(properties) {\n\t\tthis.version = 3;\n\t\tthis.file = properties.file;\n\t\tthis.sources = properties.sources;\n\t\tthis.sourcesContent = properties.sourcesContent;\n\t\tthis.names = properties.names;\n\t\tthis.mappings = encode(properties.mappings);\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this);\n\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());\n\t}\n}\n\nfunction guessIndent(code) {\n\tconst lines = code.split('\\n');\n\n\tconst tabbed = lines.filter((line) => /^\\t+/.test(line));\n\tconst spaced = lines.filter((line) => /^ {2,}/.test(line));\n\n\tif (tabbed.length === 0 && spaced.length === 0) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif (tabbed.length >= spaced.length) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tconst min = spaced.reduce((previous, current) => {\n\t\tconst numSpaces = /^ +/.exec(current)[0].length;\n\t\treturn Math.min(numSpaces, previous);\n\t}, Infinity);\n\n\treturn new Array(min + 1).join(' ');\n}\n\nfunction getRelativePath(from, to) {\n\tconst fromParts = from.split(/[/\\\\]/);\n\tconst toParts = to.split(/[/\\\\]/);\n\n\tfromParts.pop(); // get dirname\n\n\twhile (fromParts[0] === toParts[0]) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif (fromParts.length) {\n\t\tlet i = fromParts.length;\n\t\twhile (i--) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat(toParts).join('/');\n}\n\nconst toString = Object.prototype.toString;\n\nfunction isObject(thing) {\n\treturn toString.call(thing) === '[object Object]';\n}\n\nfunction getLocator(source) {\n\tconst originalLines = source.split('\\n');\n\tconst lineOffsets = [];\n\n\tfor (let i = 0, pos = 0; i < originalLines.length; i++) {\n\t\tlineOffsets.push(pos);\n\t\tpos += originalLines[i].length + 1;\n\t}\n\n\treturn function locate(index) {\n\t\tlet i = 0;\n\t\tlet j = lineOffsets.length;\n\t\twhile (i < j) {\n\t\t\tconst m = (i + j) >> 1;\n\t\t\tif (index < lineOffsets[m]) {\n\t\t\t\tj = m;\n\t\t\t} else {\n\t\t\t\ti = m + 1;\n\t\t\t}\n\t\t}\n\t\tconst line = i - 1;\n\t\tconst column = index - lineOffsets[line];\n\t\treturn { line, column };\n\t};\n}\n\nclass Mappings {\n\tconstructor(hires) {\n\t\tthis.hires = hires;\n\t\tthis.generatedCodeLine = 0;\n\t\tthis.generatedCodeColumn = 0;\n\t\tthis.raw = [];\n\t\tthis.rawSegments = this.raw[this.generatedCodeLine] = [];\n\t\tthis.pending = null;\n\t}\n\n\taddEdit(sourceIndex, content, loc, nameIndex) {\n\t\tif (content.length) {\n\t\t\tconst segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\t\t\tif (nameIndex >= 0) {\n\t\t\t\tsegment.push(nameIndex);\n\t\t\t}\n\t\t\tthis.rawSegments.push(segment);\n\t\t} else if (this.pending) {\n\t\t\tthis.rawSegments.push(this.pending);\n\t\t}\n\n\t\tthis.advance(content);\n\t\tthis.pending = null;\n\t}\n\n\taddUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {\n\t\tlet originalCharIndex = chunk.start;\n\t\tlet first = true;\n\n\t\twhile (originalCharIndex < chunk.end) {\n\t\t\tif (this.hires || first || sourcemapLocations.has(originalCharIndex)) {\n\t\t\t\tthis.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);\n\t\t\t}\n\n\t\t\tif (original[originalCharIndex] === '\\n') {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tthis.generatedCodeLine += 1;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t\tthis.generatedCodeColumn = 0;\n\t\t\t\tfirst = true;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tthis.generatedCodeColumn += 1;\n\t\t\t\tfirst = false;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t}\n\n\t\tthis.pending = null;\n\t}\n\n\tadvance(str) {\n\t\tif (!str) return;\n\n\t\tconst lines = str.split('\\n');\n\n\t\tif (lines.length > 1) {\n\t\t\tfor (let i = 0; i < lines.length - 1; i++) {\n\t\t\t\tthis.generatedCodeLine++;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t}\n\t\t\tthis.generatedCodeColumn = 0;\n\t\t}\n\n\t\tthis.generatedCodeColumn += lines[lines.length - 1].length;\n\t}\n}\n\nconst n = '\\n';\n\nconst warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false,\n};\n\nclass MagicString {\n\tconstructor(string, options = {}) {\n\t\tconst chunk = new Chunk(0, string.length, string);\n\n\t\tObject.defineProperties(this, {\n\t\t\toriginal: { writable: true, value: string },\n\t\t\toutro: { writable: true, value: '' },\n\t\t\tintro: { writable: true, value: '' },\n\t\t\tfirstChunk: { writable: true, value: chunk },\n\t\t\tlastChunk: { writable: true, value: chunk },\n\t\t\tlastSearchedChunk: { writable: true, value: chunk },\n\t\t\tbyStart: { writable: true, value: {} },\n\t\t\tbyEnd: { writable: true, value: {} },\n\t\t\tfilename: { writable: true, value: options.filename },\n\t\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\t\tsourcemapLocations: { writable: true, value: new BitSet() },\n\t\t\tstoredNames: { writable: true, value: {} },\n\t\t\tindentStr: { writable: true, value: undefined },\n\t\t});\n\n\t\tthis.byStart[0] = chunk;\n\t\tthis.byEnd[string.length] = chunk;\n\t}\n\n\taddSourcemapLocation(char) {\n\t\tthis.sourcemapLocations.add(char);\n\t}\n\n\tappend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t}\n\n\tappendLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendLeft(content);\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\t\treturn this;\n\t}\n\n\tappendRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendRight(content);\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst cloned = new MagicString(this.original, { filename: this.filename });\n\n\t\tlet originalChunk = this.firstChunk;\n\t\tlet clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());\n\n\t\twhile (originalChunk) {\n\t\t\tcloned.byStart[clonedChunk.start] = clonedChunk;\n\t\t\tcloned.byEnd[clonedChunk.end] = clonedChunk;\n\n\t\t\tconst nextOriginalChunk = originalChunk.next;\n\t\t\tconst nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif (nextClonedChunk) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif (this.indentExclusionRanges) {\n\t\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t\t}\n\n\t\tcloned.sourcemapLocations = new BitSet(this.sourcemapLocations);\n\n\t\tcloned.intro = this.intro;\n\t\tcloned.outro = this.outro;\n\n\t\treturn cloned;\n\t}\n\n\tgenerateDecodedMap(options) {\n\t\toptions = options || {};\n\n\t\tconst sourceIndex = 0;\n\t\tconst names = Object.keys(this.storedNames);\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tconst locate = getLocator(this.original);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.firstChunk.eachNext((chunk) => {\n\t\t\tconst loc = locate(chunk.start);\n\n\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tmappings.addEdit(\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\tchunk.content,\n\t\t\t\t\tloc,\n\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmappings.addUneditedChunk(sourceIndex, chunk, this.original, loc, this.sourcemapLocations);\n\t\t\t}\n\n\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : null,\n\t\t\tsources: [options.source ? getRelativePath(options.file || '', options.source) : null],\n\t\t\tsourcesContent: options.includeContent ? [this.original] : [null],\n\t\t\tnames,\n\t\t\tmappings: mappings.raw,\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\t_ensureindentStr() {\n\t\tif (this.indentStr === undefined) {\n\t\t\tthis.indentStr = guessIndent(this.original);\n\t\t}\n\t}\n\n\t_getRawIndentString() {\n\t\tthis._ensureindentStr();\n\t\treturn this.indentStr;\n\t}\n\n\tgetIndentString() {\n\t\tthis._ensureindentStr();\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t}\n\n\tindent(indentStr, options) {\n\t\tconst pattern = /^[^\\r\\n]/gm;\n\n\t\tif (isObject(indentStr)) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tif (indentStr === undefined) {\n\t\t\tthis._ensureindentStr();\n\t\t\tindentStr = this.indentStr || '\\t';\n\t\t}\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tconst isExcluded = {};\n\n\t\tif (options.exclude) {\n\t\t\tconst exclusions =\n\t\t\t\ttypeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;\n\t\t\texclusions.forEach((exclusion) => {\n\t\t\t\tfor (let i = exclusion[0]; i < exclusion[1]; i += 1) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet shouldIndentNextCharacter = options.indentStart !== false;\n\t\tconst replacer = (match) => {\n\t\t\tif (shouldIndentNextCharacter) return `${indentStr}${match}`;\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace(pattern, replacer);\n\n\t\tlet charIndex = 0;\n\t\tlet chunk = this.firstChunk;\n\n\t\twhile (chunk) {\n\t\t\tconst end = chunk.end;\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\tchunk.content = chunk.content.replace(pattern, replacer);\n\n\t\t\t\t\tif (chunk.content.length) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile (charIndex < end) {\n\t\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\t\tconst char = this.original[charIndex];\n\n\t\t\t\t\t\tif (char === '\\n') {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if (char !== '\\r' && shouldIndentNextCharacter) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif (charIndex === chunk.start) {\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._splitChunk(chunk, charIndex);\n\t\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace(pattern, replacer);\n\n\t\treturn this;\n\t}\n\n\tinsert() {\n\t\tthrow new Error(\n\t\t\t'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)'\n\t\t);\n\t}\n\n\tinsertLeft(index, content) {\n\t\tif (!warned.insertLeft) {\n\t\t\tconsole.warn(\n\t\t\t\t'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead'\n\t\t\t); // eslint-disable-line no-console\n\t\t\twarned.insertLeft = true;\n\t\t}\n\n\t\treturn this.appendLeft(index, content);\n\t}\n\n\tinsertRight(index, content) {\n\t\tif (!warned.insertRight) {\n\t\t\tconsole.warn(\n\t\t\t\t'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead'\n\t\t\t); // eslint-disable-line no-console\n\t\t\twarned.insertRight = true;\n\t\t}\n\n\t\treturn this.prependRight(index, content);\n\t}\n\n\tmove(start, end, index) {\n\t\tif (index >= start && index <= end) throw new Error('Cannot move a selection inside itself');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\t\tthis._split(index);\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tconst oldLeft = first.previous;\n\t\tconst oldRight = last.next;\n\n\t\tconst newRight = this.byStart[index];\n\t\tif (!newRight && last === this.lastChunk) return this;\n\t\tconst newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif (oldLeft) oldLeft.next = oldRight;\n\t\tif (oldRight) oldRight.previous = oldLeft;\n\n\t\tif (newLeft) newLeft.next = first;\n\t\tif (newRight) newRight.previous = last;\n\n\t\tif (!first.previous) this.firstChunk = last.next;\n\t\tif (!last.next) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight || null;\n\n\t\tif (!newLeft) this.firstChunk = first;\n\t\tif (!newRight) this.lastChunk = last;\n\t\treturn this;\n\t}\n\n\toverwrite(start, end, content, options) {\n\t\toptions = options || {};\n\t\treturn this.update(start, end, content, { ...options, overwrite: !options.contentOnly });\n\t}\n\n\tupdate(start, end, content, options) {\n\t\tif (typeof content !== 'string') throw new TypeError('replacement content must be a string');\n\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tif (end > this.original.length) throw new Error('end is out of bounds');\n\t\tif (start === end)\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot overwrite a zero-length range – use appendLeft or prependRight instead'\n\t\t\t);\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tif (options === true) {\n\t\t\tif (!warned.storeName) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string'\n\t\t\t\t); // eslint-disable-line no-console\n\t\t\t\twarned.storeName = true;\n\t\t\t}\n\n\t\t\toptions = { storeName: true };\n\t\t}\n\t\tconst storeName = options !== undefined ? options.storeName : false;\n\t\tconst overwrite = options !== undefined ? options.overwrite : false;\n\n\t\tif (storeName) {\n\t\t\tconst original = this.original.slice(start, end);\n\t\t\tObject.defineProperty(this.storedNames, original, {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: true,\n\t\t\t\tenumerable: true,\n\t\t\t});\n\t\t}\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tif (first) {\n\t\t\tlet chunk = first;\n\t\t\twhile (chunk !== last) {\n\t\t\t\tif (chunk.next !== this.byStart[chunk.end]) {\n\t\t\t\t\tthrow new Error('Cannot overwrite across a split point');\n\t\t\t\t}\n\t\t\t\tchunk = chunk.next;\n\t\t\t\tchunk.edit('', false);\n\t\t\t}\n\n\t\t\tfirst.edit(content, storeName, !overwrite);\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\t\treturn this;\n\t}\n\n\tprepend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t}\n\n\tprependLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependLeft(content);\n\t\t} else {\n\t\t\tthis.intro = content + this.intro;\n\t\t}\n\t\treturn this;\n\t}\n\n\tprependRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependRight(content);\n\t\t} else {\n\t\t\tthis.outro = content + this.outro;\n\t\t}\n\t\treturn this;\n\t}\n\n\tremove(start, end) {\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tif (start === end) return this;\n\n\t\tif (start < 0 || end > this.original.length) throw new Error('Character is out of bounds');\n\t\tif (start > end) throw new Error('end must be greater than start');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tlet chunk = this.byStart[start];\n\n\t\twhile (chunk) {\n\t\t\tchunk.intro = '';\n\t\t\tchunk.outro = '';\n\t\t\tchunk.edit('');\n\n\t\t\tchunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tlastChar() {\n\t\tif (this.outro.length) return this.outro[this.outro.length - 1];\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length) return chunk.outro[chunk.outro.length - 1];\n\t\t\tif (chunk.content.length) return chunk.content[chunk.content.length - 1];\n\t\t\tif (chunk.intro.length) return chunk.intro[chunk.intro.length - 1];\n\t\t} while ((chunk = chunk.previous));\n\t\tif (this.intro.length) return this.intro[this.intro.length - 1];\n\t\treturn '';\n\t}\n\n\tlastLine() {\n\t\tlet lineIndex = this.outro.lastIndexOf(n);\n\t\tif (lineIndex !== -1) return this.outro.substr(lineIndex + 1);\n\t\tlet lineStr = this.outro;\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length > 0) {\n\t\t\t\tlineIndex = chunk.outro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.outro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.outro + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.content.length > 0) {\n\t\t\t\tlineIndex = chunk.content.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.content.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.content + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.intro.length > 0) {\n\t\t\t\tlineIndex = chunk.intro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.intro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.intro + lineStr;\n\t\t\t}\n\t\t} while ((chunk = chunk.previous));\n\t\tlineIndex = this.intro.lastIndexOf(n);\n\t\tif (lineIndex !== -1) return this.intro.substr(lineIndex + 1) + lineStr;\n\t\treturn this.intro + lineStr;\n\t}\n\n\tslice(start = 0, end = this.original.length) {\n\t\twhile (start < 0) start += this.original.length;\n\t\twhile (end < 0) end += this.original.length;\n\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n\t\t\tif (chunk.start < end && chunk.end >= end) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif (chunk && chunk.edited && chunk.start !== start)\n\t\t\tthrow new Error(`Cannot use replaced character ${start} as slice start anchor.`);\n\n\t\tconst startChunk = chunk;\n\t\twhile (chunk) {\n\t\t\tif (chunk.intro && (startChunk !== chunk || chunk.start === start)) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tconst containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif (containsEnd && chunk.edited && chunk.end !== end)\n\t\t\t\tthrow new Error(`Cannot use replaced character ${end} as slice end anchor.`);\n\n\t\t\tconst sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tconst sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice(sliceStart, sliceEnd);\n\n\t\t\tif (chunk.outro && (!containsEnd || chunk.end === end)) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif (containsEnd) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// TODO deprecate this? not really very useful\n\tsnip(start, end) {\n\t\tconst clone = this.clone();\n\t\tclone.remove(0, start);\n\t\tclone.remove(end, clone.original.length);\n\n\t\treturn clone;\n\t}\n\n\t_split(index) {\n\t\tif (this.byStart[index] || this.byEnd[index]) return;\n\n\t\tlet chunk = this.lastSearchedChunk;\n\t\tconst searchForward = index > chunk.end;\n\n\t\twhile (chunk) {\n\t\t\tif (chunk.contains(index)) return this._splitChunk(chunk, index);\n\n\t\t\tchunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];\n\t\t}\n\t}\n\n\t_splitChunk(chunk, index) {\n\t\tif (chunk.edited && chunk.content.length) {\n\t\t\t// zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tconst loc = getLocator(this.original)(index);\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot split a chunk that has already been edited (${loc.line}:${loc.column} – \"${chunk.original}\")`\n\t\t\t);\n\t\t}\n\n\t\tconst newChunk = chunk.split(index);\n\n\t\tthis.byEnd[index] = chunk;\n\t\tthis.byStart[index] = newChunk;\n\t\tthis.byEnd[newChunk.end] = newChunk;\n\n\t\tif (chunk === this.lastChunk) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\tlet str = this.intro;\n\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t}\n\n\tisEmpty() {\n\t\tlet chunk = this.firstChunk;\n\t\tdo {\n\t\t\tif (\n\t\t\t\t(chunk.intro.length && chunk.intro.trim()) ||\n\t\t\t\t(chunk.content.length && chunk.content.trim()) ||\n\t\t\t\t(chunk.outro.length && chunk.outro.trim())\n\t\t\t)\n\t\t\t\treturn false;\n\t\t} while ((chunk = chunk.next));\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\tlet chunk = this.firstChunk;\n\t\tlet length = 0;\n\t\tdo {\n\t\t\tlength += chunk.intro.length + chunk.content.length + chunk.outro.length;\n\t\t} while ((chunk = chunk.next));\n\t\treturn length;\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimEndAborted(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tlet chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimEnd(rx);\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif (chunk.end !== end) {\n\t\t\t\tif (this.lastChunk === chunk) {\n\t\t\t\t\tthis.lastChunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.previous;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimEnd(charType) {\n\t\tthis.trimEndAborted(charType);\n\t\treturn this;\n\t}\n\ttrimStartAborted(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tlet chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimStart(rx);\n\n\t\t\tif (chunk.end !== end) {\n\t\t\t\t// special case...\n\t\t\t\tif (chunk === this.lastChunk) this.lastChunk = chunk.next;\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.next;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimStart(charType) {\n\t\tthis.trimStartAborted(charType);\n\t\treturn this;\n\t}\n\n\thasChanged() {\n\t\treturn this.original !== this.toString();\n\t}\n\n\t_replaceRegexp(searchValue, replacement) {\n\t\tfunction getReplacement(match, str) {\n\t\t\tif (typeof replacement === 'string') {\n\t\t\t\treturn replacement.replace(/\\$(\\$|&|\\d+)/g, (_, i) => {\n\t\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_a_parameter\n\t\t\t\t\tif (i === '$') return '$';\n\t\t\t\t\tif (i === '&') return match[0];\n\t\t\t\t\tconst num = +i;\n\t\t\t\t\tif (num < match.length) return match[+i];\n\t\t\t\t\treturn `$${i}`;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn replacement(...match, match.index, str, match.groups);\n\t\t\t}\n\t\t}\n\t\tfunction matchAll(re, str) {\n\t\t\tlet match;\n\t\t\tconst matches = [];\n\t\t\twhile ((match = re.exec(str))) {\n\t\t\t\tmatches.push(match);\n\t\t\t}\n\t\t\treturn matches;\n\t\t}\n\t\tif (searchValue.global) {\n\t\t\tconst matches = matchAll(searchValue, this.original);\n\t\t\tmatches.forEach((match) => {\n\t\t\t\tif (match.index != null)\n\t\t\t\t\tthis.overwrite(\n\t\t\t\t\t\tmatch.index,\n\t\t\t\t\t\tmatch.index + match[0].length,\n\t\t\t\t\t\tgetReplacement(match, this.original)\n\t\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\tconst match = this.original.match(searchValue);\n\t\t\tif (match && match.index != null)\n\t\t\t\tthis.overwrite(\n\t\t\t\t\tmatch.index,\n\t\t\t\t\tmatch.index + match[0].length,\n\t\t\t\t\tgetReplacement(match, this.original)\n\t\t\t\t);\n\t\t}\n\t\treturn this;\n\t}\n\n\t_replaceString(string, replacement) {\n\t\tconst { original } = this;\n\t\tconst index = original.indexOf(string);\n\n\t\tif (index !== -1) {\n\t\t\tthis.overwrite(index, index + string.length, replacement);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\treplace(searchValue, replacement) {\n\t\tif (typeof searchValue === 'string') {\n\t\t\treturn this._replaceString(searchValue, replacement);\n\t\t}\n\n\t\treturn this._replaceRegexp(searchValue, replacement);\n\t}\n\n\t_replaceAllString(string, replacement) {\n\t\tconst { original } = this;\n\t\tconst stringLength = string.length;\n\t\tfor (\n\t\t\tlet index = original.indexOf(string);\n\t\t\tindex !== -1;\n\t\t\tindex = original.indexOf(string, index + stringLength)\n\t\t) {\n\t\t\tthis.overwrite(index, index + stringLength, replacement);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\treplaceAll(searchValue, replacement) {\n\t\tif (typeof searchValue === 'string') {\n\t\t\treturn this._replaceAllString(searchValue, replacement);\n\t\t}\n\n\t\tif (!searchValue.global) {\n\t\t\tthrow new TypeError(\n\t\t\t\t'MagicString.prototype.replaceAll called with a non-global RegExp argument'\n\t\t\t);\n\t\t}\n\n\t\treturn this._replaceRegexp(searchValue, replacement);\n\t}\n}\n\nconst hasOwnProp = Object.prototype.hasOwnProperty;\n\nclass Bundle {\n\tconstructor(options = {}) {\n\t\tthis.intro = options.intro || '';\n\t\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\t\tthis.sources = [];\n\t\tthis.uniqueSources = [];\n\t\tthis.uniqueSourceIndexByFilename = {};\n\t}\n\n\taddSource(source) {\n\t\tif (source instanceof MagicString) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator,\n\t\t\t});\n\t\t}\n\n\t\tif (!isObject(source) || !source.content) {\n\t\t\tthrow new Error(\n\t\t\t\t'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`'\n\t\t\t);\n\t\t}\n\n\t\t['filename', 'indentExclusionRanges', 'separator'].forEach((option) => {\n\t\t\tif (!hasOwnProp.call(source, option)) source[option] = source.content[option];\n\t\t});\n\n\t\tif (source.separator === undefined) {\n\t\t\t// TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif (source.filename) {\n\t\t\tif (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tconst uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];\n\t\t\t\tif (source.content.original !== uniqueSource.content) {\n\t\t\t\t\tthrow new Error(`Illegal source: same filename (${source.filename}), different contents`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push(source);\n\t\treturn this;\n\t}\n\n\tappend(str, options) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString(str),\n\t\t\tseparator: (options && options.separator) || '',\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator,\n\t\t});\n\n\t\tthis.sources.forEach((source) => {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator,\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t}\n\n\tgenerateDecodedMap(options = {}) {\n\t\tconst names = [];\n\t\tthis.sources.forEach((source) => {\n\t\t\tObject.keys(source.content.storedNames).forEach((name) => {\n\t\t\t\tif (!~names.indexOf(name)) names.push(name);\n\t\t\t});\n\t\t});\n\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tmappings.advance(this.separator);\n\t\t\t}\n\n\t\t\tconst sourceIndex = source.filename ? this.uniqueSourceIndexByFilename[source.filename] : -1;\n\t\t\tconst magicString = source.content;\n\t\t\tconst locate = getLocator(magicString.original);\n\n\t\t\tif (magicString.intro) {\n\t\t\t\tmappings.advance(magicString.intro);\n\t\t\t}\n\n\t\t\tmagicString.firstChunk.eachNext((chunk) => {\n\t\t\t\tconst loc = locate(chunk.start);\n\n\t\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\t\tif (source.filename) {\n\t\t\t\t\tif (chunk.edited) {\n\t\t\t\t\t\tmappings.addEdit(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk.content,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmappings.addUneditedChunk(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tmagicString.original,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tmagicString.sourcemapLocations\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmappings.advance(chunk.content);\n\t\t\t\t}\n\n\t\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t\t});\n\n\t\t\tif (magicString.outro) {\n\t\t\t\tmappings.advance(magicString.outro);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : null,\n\t\t\tsources: this.uniqueSources.map((source) => {\n\t\t\t\treturn options.file ? getRelativePath(options.file, source.filename) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map((source) => {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames,\n\t\t\tmappings: mappings.raw,\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\tgetIndentString() {\n\t\tconst indentStringCounts = {};\n\n\t\tthis.sources.forEach((source) => {\n\t\t\tconst indentStr = source.content._getRawIndentString();\n\n\t\t\tif (indentStr === null) return;\n\n\t\t\tif (!indentStringCounts[indentStr]) indentStringCounts[indentStr] = 0;\n\t\t\tindentStringCounts[indentStr] += 1;\n\t\t});\n\n\t\treturn (\n\t\t\tObject.keys(indentStringCounts).sort((a, b) => {\n\t\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t\t})[0] || '\\t'\n\t\t);\n\t}\n\n\tindent(indentStr) {\n\t\tif (!arguments.length) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\tlet trailingNewline = !this.intro || this.intro.slice(-1) === '\\n';\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\tconst indentStart = trailingNewline || (i > 0 && /\\r?\\n$/.test(separator));\n\n\t\t\tsource.content.indent(indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart, //: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\ttrailingNewline = source.content.lastChar() === '\\n';\n\t\t});\n\n\t\tif (this.intro) {\n\t\t\tthis.intro =\n\t\t\t\tindentStr +\n\t\t\t\tthis.intro.replace(/^[^\\n]/gm, (match, index) => {\n\t\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprepend(str) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst body = this.sources\n\t\t\t.map((source, i) => {\n\t\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\t\tconst str = (i > 0 ? separator : '') + source.content.toString();\n\n\t\t\t\treturn str;\n\t\t\t})\n\t\t\t.join('');\n\n\t\treturn this.intro + body;\n\t}\n\n\tisEmpty() {\n\t\tif (this.intro.length && this.intro.trim()) return false;\n\t\tif (this.sources.some((source) => !source.content.isEmpty())) return false;\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\treturn this.sources.reduce(\n\t\t\t(length, source) => length + source.content.length(),\n\t\t\tthis.intro.length\n\t\t);\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimStart(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\t\tthis.intro = this.intro.replace(rx, '');\n\n\t\tif (!this.intro) {\n\t\t\tlet source;\n\t\t\tlet i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i++];\n\t\t\t\tif (!source) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (!source.content.trimStartAborted(charType));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\ttrimEnd(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tlet source;\n\t\tlet i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this.sources[i--];\n\t\t\tif (!source) {\n\t\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (!source.content.trimEndAborted(charType));\n\n\t\treturn this;\n\t}\n}\n\nexport { Bundle, SourceMap, MagicString as default };\n"],"names":["chars","encode","decoded","sourceFileIndex","sourceCodeLine","sourceCodeColumn","nameIndex","mappings","i","line","generatedCodeColumn","lineMappings","_i","line_1","segment","segmentMappings","encodeInteger","num","result","clamped","BitSet","arg","n","Chunk","start","end","content","chunk","index","fn","storeName","contentOnly","sliceIndex","originalBefore","originalAfter","newChunk","rx","trimmed","getBtoa","str","btoa","SourceMap","properties","guessIndent","code","lines","tabbed","spaced","min","previous","current","numSpaces","getRelativePath","from","to","fromParts","toParts","toString","isObject","thing","getLocator","source","originalLines","lineOffsets","pos","j","m","column","Mappings","hires","sourceIndex","loc","original","sourcemapLocations","originalCharIndex","first","warned","MagicString","string","options","char","cloned","originalChunk","clonedChunk","nextOriginalChunk","nextClonedChunk","names","locate","indentStr","pattern","isExcluded","exclusion","shouldIndentNextCharacter","replacer","match","charIndex","last","oldLeft","oldRight","newRight","newLeft","overwrite","lineIndex","lineStr","startChunk","containsEnd","sliceStart","sliceEnd","clone","searchForward","length","charType","aborted","searchValue","replacement","getReplacement","_","matchAll","re","matches","stringLength","hasOwnProp","Bundle","option","uniqueSource","bundle","name","magicString","indentStringCounts","a","b","trailingNewline","separator","indentStart","body"],"mappings":"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"}